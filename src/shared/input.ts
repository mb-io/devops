import { getInput, getMultilineInput, InputOptions } from '@actions/core';
import fs from 'fs';
import * as yml from 'js-yaml';

export interface InputDefinition extends InputOptions {
  description?: string;
  isJson?: boolean;
}

export function input<T, V>(
  inputDef: InputDefinition = { description: '', isJson: false }
) {
  return function (target: any, ctx: ClassFieldDecoratorContext<T, V>) {
    const inputName = ctx.name.toString();
    return function (this: T, value: any) {
      if (process.env.GENERATE_ACTION_YML) {
        generateInputYml(inputName, inputDef, value);
        return;
      }

      switch (typeof value) {
        case 'string':
          return getInput(inputName, inputDef) ?? value;
        case 'boolean':
          return getInput(inputName, inputDef) === 'true' || value;
        case 'number':
          return getInput(inputName)
            ? parseInt(getInput(inputName, inputDef))
            : value;
        case 'object': {
          if (inputDef.isJson) {
            return getInput(inputName, inputDef)
              ? JSON.parse(getInput(inputName, inputDef))
              : value;
          }
          const multiLineValue = getMultilineInput(inputName, inputDef);
          return multiLineValue?.length ? multiLineValue : value;
        }
        default:
          return getInput(inputName, inputDef) ?? value;
      }
    };
  };
}

function generateInputYml(
  inputName: string,
  inputDef: InputDefinition,
  value: any
) {
  const filePath = process.env.ACTION_YML_PATH as string;
  const doc = yml.load(fs.readFileSync(filePath, 'utf-8')) as any;
  doc.inputs = doc.inputs ?? {};
  doc.inputs[inputName] = {};
  if (inputDef.description) {
    doc.inputs[inputName].description = inputDef.description.replaceAll(
      '      ',
      ''
    );
  }
  doc.inputs[inputName].required = inputDef.required ?? false;
  let defaultValue = value;
  if (typeof value === 'object') {
    if (inputDef.isJson) {
      defaultValue = defaultValue ? JSON.stringify(defaultValue, null, 2) : '';
    } else if (Array.isArray(value)) {
      defaultValue = defaultValue.join('\n');
    }
  }

  if (typeof defaultValue !== 'string' && !(defaultValue instanceof String)) {
    defaultValue = JSON.stringify(defaultValue);
  }

  if (!inputDef.required || defaultValue) {
    doc.inputs[inputName].default = defaultValue;
  }

  const ymlString = '# This file is generated by typescript\n' + yml.dump(doc);
  fs.writeFileSync(filePath, ymlString, { encoding: 'utf-8' });
}
